import React, { useState } from "react";
import s from "./style.module.scss";
import Header from "../../layout/header";
import { Button } from "@mui/material";
import { IconArrowLeftRight } from "../../components/icon/IconArrowLeftRight";
import mammoth from "mammoth";
import * as pdfjsLib from "pdfjs-dist";
// import "pdfjs-dist/build/pdf.worker.entry"; // B·∫Øt bu·ªôc n·∫øu d√πng Webpack
import { fetchAPITranslate } from "../../utils/translate"; // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥

const languages = [
  { code: "vi", name: "Ti·∫øng Vi·ªát" },
  { code: "en", name: "English" },
  { code: "ja", name: "Ti·∫øng Nh·∫≠t" },
  { code: "ko", name: "Ti·∫øng H√†n" },
  { code: "zh", name: "Ti·∫øng Trung" },
  // ... th√™m n·∫øu c·∫ßn
];

const TranslateDocumentPage = () => {
  const [sourceLang, setSourceLang] = useState("vi");
  const [targetLang, setTargetLang] = useState("en");
  const [fileText, setFileText] = useState<string | null>(null);
  const [translatedText, setTranslatedText] = useState<string | null>(null);

  const handleUploadDocument = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const fileExt = file.name.split(".").pop()?.toLowerCase();

    if (fileExt === "txt") {
      const text = await file.text();
      setFileText(text);
    } else if (fileExt === "docx") {
      const arrayBuffer = await file.arrayBuffer();
      const result = await mammoth.extractRawText({ arrayBuffer });
      setFileText(result.value);
    } else if (fileExt === "pdf") {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      let text = "";
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const content = await page.getTextContent();
        text += content.items.map((item: any) => item.str).join(" ") + "\n";
      }
      setFileText(text);
    } else {
      alert("ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£. Vui l√≤ng t·∫£i PDF, DOCX ho·∫∑c TXT.");
    }
  };

  const handleTranslateDocument = async () => {
    if (!fileText) {
      alert("B·∫°n ch∆∞a t·∫£i t√†i li·ªáu n√†o.");
      return;
    }

    try {
      const translated = await fetchAPITranslate(fileText, sourceLang, targetLang);
      setTranslatedText(translated);
    } catch (error) {
      alert("L·ªói khi d·ªãch t√†i li·ªáu.");
    }
  };

  return (
    <div className={`${s.rainbow_bg} justify-center items-center min-h-screen`}>
      <div className="header">
        <Header />
      </div>
      <div className="w-full flex justify-content-center">
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white py-10 px-4 sm:px-10">
          <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-6 sm:p-10">
            <h2 className="text-2xl font-bold text-center text-blue-700 mb-6">üìÑ D·ªãch T√†i Li·ªáu</h2>

            {/* T·∫£i t·ªáp */}
            <div className="mb-5">
              <label className="block text-sm font-medium text-gray-700 mb-2">T·∫£i t√†i li·ªáu c·∫ßn d·ªãch</label>
              <div
                onClick={() => document.getElementById("fileInput")?.click()}
                className="cursor-pointer border-2 border-dashed border-gray-300 rounded-lg py-6 px-4 text-center hover:bg-blue-50 transition"
              >
                <p className="text-gray-600">üìÇ Nh·∫•n ho·∫∑c k√©o th·∫£ t·ªáp v√†o ƒë√¢y</p>
                <p className="text-xs text-gray-400 mt-1">(H·ªó tr·ª£: PDF, DOCX, TXT...)</p>
              </div>
              <input
                id="fileInput"
                type="file"
                accept=".pdf,.doc,.docx,.txt"
                className="hidden"
                onChange={handleUploadDocument}
              />
            </div>

            {/* Ch·ªçn ng√¥n ng·ªØ */}
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Ng√¥n ng·ªØ g·ªëc</label>
                <select
                  value={sourceLang}
                  onChange={(e) => setSourceLang(e.target.value)}
                  className="w-full border rounded-lg px-3 py-2"
                >
                  {languages.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                      {lang.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">D·ªãch sang</label>
                <select
                  value={targetLang}
                  onChange={(e) => setTargetLang(e.target.value)}
                  className="w-full border rounded-lg px-3 py-2"
                >
                  {languages.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                      {lang.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* N√∫t d·ªãch */}
            <div className="text-center">
              <button
                onClick={handleTranslateDocument}
                className="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition"
              >
                üöÄ D·ªãch Ngay
              </button>
            </div>

            {/* K·∫øt qu·∫£ */}
            {translatedText && (
              <div className="mt-8">
                <h3 className="text-lg font-semibold mb-2 text-gray-700">üîç K·∫øt qu·∫£ d·ªãch:</h3>
                <div className="bg-gray-50 p-4 border rounded-lg max-h-80 overflow-y-auto">
                  <p className="text-gray-800 whitespace-pre-wrap">{translatedText}</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TranslateDocumentPage;
